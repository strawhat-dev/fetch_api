import type { SetEntry } from '@/types';

export type HttpMethod = SetEntry<typeof HTTP_METHODS>;

const METHOD_DESCRIPTOR = {
  configurable: false,
  enumerable: false,
  writable: false,
} as const;

export const DESCRIPTOR_MAP = {
  create: METHOD_DESCRIPTOR,
  with: METHOD_DESCRIPTOR,
  set: METHOD_DESCRIPTOR,
  use: METHOD_DESCRIPTOR,
  get: METHOD_DESCRIPTOR,
  post: METHOD_DESCRIPTOR,
  put: METHOD_DESCRIPTOR,
  patch: METHOD_DESCRIPTOR,
  delete: METHOD_DESCRIPTOR,
  trace: METHOD_DESCRIPTOR,
  connect: METHOD_DESCRIPTOR,
  options: METHOD_DESCRIPTOR,
  head: METHOD_DESCRIPTOR,
} as const;

export const BODY_TYPES = new Set([
  'ArrayBuffer',
  'FormData',
  'ReadableStream',
  'SharedArrayBuffer',
  'URLSearchParams',
]);

export const SELF_CONSTRUCTABLE_TYPES = new Set([
  'Date',
  'Error',
  'Headers',
  'RegExp',
  'Request',
  'Response',
  'URL',
  'URLSearchParams',
]);

export const STRUCTURED_CLONABLE_TYPES = new Set([
  'ArrayBuffer',
  'AudioData',
  'Blob',
  'CropTarget',
  'CryptoKey',
  'DOMException',
  'DOMMatrix',
  'DOMMatrixReadOnly',
  'DOMPoint',
  'DOMPointReadOnly',
  'DOMQuad',
  'DOMRect',
  'DOMRectReadOnly',
  'File',
  'FileList',
  'FileSystemDirectoryHandle',
  'FileSystemFileHandle',
  'FileSystemHandle',
  'GPUCompilationInfo',
  'GPUCompilationMessage',
  'ImageBitmap',
  'ImageData',
  'RTCCertificate',
  'SharedArrayBuffer',
  'VideoFrame',
]);

export const HTTP_METHODS = new Set([
  'get',
  'post',
  'put',
  'patch',
  'delete',
  'trace',
  'connect',
  'options',
  'head',
] as const);

// https://github.com/axios/axios/blob/v1.x/lib/helpers/HttpStatusCode.js
export const HTTP_CODES = {
  100: 'Continue',
  101: 'SwitchingProtocols',
  102: 'Processing',
  103: 'EarlyHints',
  200: 'Ok',
  201: 'Created',
  202: 'Accepted',
  203: 'NonAuthoritativeInformation',
  204: 'NoContent',
  205: 'ResetContent',
  206: 'PartialContent',
  207: 'MultiStatus',
  208: 'AlreadyReported',
  226: 'ImUsed',
  300: 'MultipleChoices',
  301: 'MovedPermanently',
  302: 'Found',
  303: 'SeeOther',
  304: 'NotModified',
  305: 'UseProxy',
  306: 'Unused',
  307: 'TemporaryRedirect',
  308: 'PermanentRedirect',
  400: 'BadRequest',
  401: 'Unauthorized',
  402: 'PaymentRequired',
  403: 'Forbidden',
  404: 'NotFound',
  405: 'MethodNotAllowed',
  406: 'NotAcceptable',
  407: 'ProxyAuthenticationRequired',
  408: 'RequestTimeout',
  409: 'Conflict',
  410: 'Gone',
  411: 'LengthRequired',
  412: 'PreconditionFailed',
  413: 'PayloadTooLarge',
  414: 'UriTooLong',
  415: 'UnsupportedMediaType',
  416: 'RangeNotSatisfiable',
  417: 'ExpectationFailed',
  418: 'ImATeapot',
  421: 'MisdirectedRequest',
  422: 'UnprocessableEntity',
  423: 'Locked',
  424: 'FailedDependency',
  425: 'TooEarly',
  426: 'UpgradeRequired',
  428: 'PreconditionRequired',
  429: 'TooManyRequests',
  431: 'RequestHeaderFieldsTooLarge',
  451: 'UnavailableForLegalReasons',
  500: 'InternalServerError',
  501: 'NotImplemented',
  502: 'BadGateway',
  503: 'ServiceUnavailable',
  504: 'GatewayTimeout',
  505: 'HttpVersionNotSupported',
  506: 'VariantAlsoNegotiates',
  507: 'InsufficientStorage',
  508: 'LoopDetected',
  510: 'NotExtended',
  511: 'NetworkAuthenticationRequired',
} as Record<number, string>;
